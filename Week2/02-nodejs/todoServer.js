/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");

const app = express();

let todos = [];

app.use(bodyParser.json());

// Get all Todos
app.get("/todos", async (req, res) => {
  try {
    return res.status(200).json(todos);
  } catch (error) {
    return res.status(500).json({ error: "Internal Server Error" });
  }
});

// Get todos that match the id
app.get("/todos/:id", async (req, res) => {
  try {
    let todoByID = todos.find((file) => file.id === parseInt(req.params.id));
    if (!todoByID) {
      res.status(404).json({ error: "Todo not found" });
    }
    res.status(200).json(todoByID);
  } catch (error) {
    res.status(500).json({ error: "Internal Server Error" });
  }
});

// Create a new todo item in todo.json file.
app.post("/todos", async (req, res) => {
  try {
    const todo = {
      id: Math.floor(Math.random() * 1000),
      title: req.body.title,
      completed: req.body.completed,
      description: req.body.description,
    };
    todos.push(todo);
    res.status(201).json(todo);
  } catch (error) {
    return res.status(500).json({ error: error });
  }
});

app.put("/todos/:id", async (req, res) => {
  try {
    const todoByID = todos.find((todo) => todo.id === parseInt(req.params.id));
    if (todoByID == undefined) {
      return res.status(404).send({ error: "Todo not found" });
    }
    todoByID.title = req.body.title;
    todoByID.description = req.body.description;

    res.status(200).send(todoByID);
  } catch (error) {
    return res.status(500).json({ error: "Internal Server Error" });
  }
});

app.delete("/todos/:id", async (req, res) => {
  try {
    const index = todos.findIndex(
      (todo) => todo.id === parseInt(req.params.id)
    );
    if (index === -1) {
      return res.status(404).json({ error: "Todo not found" });
    }
    todos.splice(index, 1);
    return res.status(200).json({ message: `Deleted todo with ID` });
  } catch (error) {
    return res.status(500).json({ error: `Internal Server Error` });
  }
});

app.use((req, res) => {
  return res.status(404).json({ error: "Route not found" });
});

module.exports = app;
